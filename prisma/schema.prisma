generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ===== Your enums (expanded to avoid parser issues) =====
 */
enum DeliveryType {
  VAGINAL
  C_SECTION
  VBAC
  OTHER
}

enum MoodScore {
  VERY_LOW
  LOW
  NEUTRAL
  HIGH
  VERY_HIGH
}

enum BleedingLevel {
  NONE
  LIGHT
  MODERATE
  HEAVY
}

enum FeedingMode {
  BREAST
  PUMP
  FORMULA
  MIXED
}

enum TicketStatus {
  PENDING
  ANSWERED
  WITHDRAWN
  EXPIRED
}

/**
 * ===== Diary/triage enums =====
 */
enum PpdStage {
  UNDIAGNOSED
  ACUTE
  SUBACUTE
  DELAYED
}

enum RiskSignal {
  GREEN
  YELLOW
  RED
}

/**
 * ===== Models =====
 */
model MotherProfile {
  id             Int          @id @default(autoincrement())
  preferredName  String
  deliveryType   DeliveryType
  deliveryDate   DateTime
  contactMethods Json
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Added for diary flows
  tz       String?
  ppdStage PpdStage @default(UNDIAGNOSED)

  // NEW (for avatar on Provider page)
  photoUrl String? // e.g. "/patients/ali.jpg"

  checkIns     CheckIn[]
  careContacts CareContact[]
  relayTickets RelayTicket[]
  wearable     WearableSample[]

  diaryEntries DiaryEntry[]
  dailyPrompts DailyPrompt[]
  alerts       ProviderAlert[]
  ChatSession  ChatSession[]
}

model CheckIn {
  id        Int           @id @default(autoincrement())
  motherId  Int
  date      DateTime
  mood      MoodScore
  sleepMin  Int
  painScore Int
  bleeding  BleedingLevel
  feeding   FeedingMode
  flags     Json
  notes     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mother MotherProfile @relation(fields: [motherId], references: [id], onDelete: Cascade)

  @@unique([motherId, date])
  @@index([motherId, date])
}

model CareContact {
  id        Int       @id @default(autoincrement())
  motherId  Int
  name      String
  role      String
  emailSMS  String
  consented Boolean   @default(false)
  lastUsed  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mother MotherProfile @relation(fields: [motherId], references: [id], onDelete: Cascade)

  @@index([motherId])
}

model RelayTicket {
  id                 Int          @id @default(autoincrement())
  motherId           Int
  question           String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  riskFlags          Json
  summarySnapshot    Json
  status             TicketStatus @default(PENDING)
  providerLinkExpiry DateTime?

  mother          MotherProfile   @relation(fields: [motherId], references: [id], onDelete: Cascade)
  providerDrafts  ProviderDraft[]
  providerReplies ProviderReply[]
  ChatMessage     ChatMessage[]

  @@index([motherId])
  @@index([providerLinkExpiry])
}

model ProviderDraft {
  id           Int      @id @default(autoincrement())
  ticketId     Int
  draftText    String
  modelMeta    Json
  lastEditedAt DateTime @default(now())
  createdAt    DateTime @default(now())

  ticket RelayTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
}

model ProviderReply {
  id           Int      @id @default(autoincrement())
  ticketId     Int
  finalText    String
  providerName String
  sentAt       DateTime @default(now())
  ackByMother  Boolean  @default(false)

  ticket RelayTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
}

model WearableSample {
  id        Int      @id @default(autoincrement())
  motherId  Int
  date      DateTime
  sleepMin  Int?
  hrvMs     Int?
  steps     Int?
  restingHr Int?

  createdAt DateTime @default(now())

  mother MotherProfile @relation(fields: [motherId], references: [id], onDelete: Cascade)

  @@unique([motherId, date])
  @@index([motherId, date])
}

model DailyPrompt {
  id        Int      @id @default(autoincrement())
  motherId  Int
  date      DateTime
  prompts   Json
  createdAt DateTime @default(now())

  mother MotherProfile @relation(fields: [motherId], references: [id], onDelete: Cascade)

  @@unique([motherId, date])
  @@index([motherId, date])
}

model DiaryEntry {
  id            Int         @id @default(autoincrement())
  motherId      Int
  date          DateTime
  freeText      String      @db.Text
  responses     Json?
  riskSignal    RiskSignal?
  redactedNotes String?     @db.Text
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  mother        MotherProfile   @relation(fields: [motherId], references: [id], onDelete: Cascade)
  ProviderAlert ProviderAlert[]

  @@unique([motherId, date])
  @@index([motherId, date])
}

model ProviderAlert {
  id        Int        @id @default(autoincrement())
  motherId  Int
  entryId   Int
  signal    RiskSignal
  summary   String     @db.Text
  createdAt DateTime   @default(now())

  mother MotherProfile @relation(fields: [motherId], references: [id], onDelete: Cascade)
  entry  DiaryEntry    @relation(fields: [entryId], references: [id], onDelete: Cascade)

  @@index([motherId, createdAt])
}

// ===== Mia Chat enums =====
enum ChatMode {
  GENERAL
  MOOD
  BONDING
  HEALTH
}

enum MessageRole {
  MOTHER
  MIA
  PROVIDER
}

enum OversightStatus {
  NONE
  AWAITING_PROVIDER
  APPROVED
  MODIFIED
}

// ===== Mia Chat models =====
model ChatSession {
  id        Int      @id @default(autoincrement())
  motherId  Int
  date      DateTime // UTC start-of-day for the mother's TZ
  seqInDay  Int // 1st chat of the day, 2nd, ...
  mode      ChatMode @default(GENERAL)
  createdAt DateTime @default(now())

  mother   MotherProfile @relation(fields: [motherId], references: [id], onDelete: Cascade)
  messages ChatMessage[]

  @@unique([motherId, date, seqInDay])
  @@index([motherId, date])
}

model ChatMessage {
  id            Int             @id @default(autoincrement())
  sessionId     Int
  role          MessageRole
  content       String          @db.Text
  oversight     OversightStatus @default(NONE)
  relayTicketId Int?
  meta          Json?
  createdAt     DateTime        @default(now())

  session     ChatSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  relayTicket RelayTicket? @relation(fields: [relayTicketId], references: [id])

  @@index([sessionId, createdAt])
}

// --- Enums ---
enum ExerciseHabit {
  NONE
  LIGHT
  MODERATE
  VIGOROUS
}

enum EatingHabit {
  POOR
  FAIR
  GOOD
  EXCELLENT
}

enum SleepHabit {
  POOR
  FAIR
  GOOD
  EXCELLENT
}

// --- Surveys ---
model MoodWellbeingSurvey {
  id          Int           @id @default(autoincrement())
  motherId    Int?
  date        DateTime
  exercise    ExerciseHabit
  eating      EatingHabit
  sleep       SleepHabit
  mentalScore Int // 1..10
  sessionId   Int? // link to Session if you want it
  createdAt   DateTime      @default(now())
}

model BondingSurvey {
  id               Int      @id @default(autoincrement())
  motherId         Int?
  date             DateTime
  babyContentScore Int // 1..10
  timeWithBabyMin  Int // minutes
  sessionId        Int?
  createdAt        DateTime @default(now())
}
